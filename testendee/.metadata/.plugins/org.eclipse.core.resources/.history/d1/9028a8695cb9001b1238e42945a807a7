package testendee.client.global;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class Converter {

	public static String toStr(Object obj) {

		if (obj == null)
			return "";

		String ret = null;
		Class<?> type = obj.getClass();
		if (type == Date.class) {
			Date d = (Date) obj;
			ret = toDateTimeStr(d);
		} else if (type == String.class) {
			ret = (String) obj;
		} else {
			ret = String.valueOf(obj);
		}

		return ret;
	}

	public static String toStdStr(String str) {
		if (str == null) {
			return null;
		}

		return str.toUpperCase().trim();
	}

	public static Date parseDate(String strDate) {

		Date date = null;

		if (strDate == null)
			return null;

		strDate = strDate.trim();

		if (strDate.length() == 0 || strDate.equals("null"))
			return null;

		try {
			switch (strDate.trim().length()) {
			case 0:
				date = null;
				break;
			case 6:
				date = (new SimpleDateFormat(DateFormats.DATE_6)).parse(strDate);
				break;
			case 8:
				date = (new SimpleDateFormat(DateFormats.TIME_SIMPLE)).parse(strDate);
				break;
			case 9:
				date = (new SimpleDateFormat(DateFormats.DATE_9_SHORT_YEAR)).parse(strDate);
				break;
			case 10:
				if (strDate.substring(4, 5).equals("."))
					date = (new SimpleDateFormat(DateFormats.DATE_DOT)).parse(strDate);
				else if (strDate.charAt(4) == '-' && strDate.charAt(7) == '-')
					date = (new SimpleDateFormat(DateFormats.DATE_SIMPLE)).parse(strDate);
				else if (strDate.substring(4, 5).equals("/"))
					date = (new SimpleDateFormat(DateFormats.DATE_SLUSH)).parse(strDate);
				else
					date = (new SimpleDateFormat(DateFormats.DATE_10)).parse(strDate);
				break;
			case 12:
				date = (new SimpleDateFormat(DateFormats.DATE_12)).parse(strDate);
				break;
			case 19:
				if (strDate.contains("T"))
					date = (new SimpleDateFormat(DateFormats.DATE_19_T)).parse(strDate);
				else if (strDate.substring(4, 5).equals("."))
					date = (new SimpleDateFormat(DateFormats.DATE_DOT_TIME)).parse(strDate);
				else
					date = (new SimpleDateFormat(DateFormats.DATE_TIME_SIMPLE)).parse(strDate);
				break;
			case 20:
				date = (new SimpleDateFormat(DateFormats.DATE_20_T_Z)).parse(strDate);
				break;
			case 21:
				if (strDate.substring(4, 5).equals("."))
					date = (new SimpleDateFormat(DateFormats.DATE_21_DOT)).parse(strDate);
				else
					date = (new SimpleDateFormat(DateFormats.DATE_21)).parse(strDate);
				break;
			case 22:
				date = (new SimpleDateFormat(DateFormats.DATE_22)).parse(strDate);
				break;
			case 23:
				if (strDate.substring(4, 5).equals("."))
					date = (new SimpleDateFormat(DateFormats.DATE_23_DOT)).parse(strDate);
				else if (strDate.contains("'T'")) {
					date = (new SimpleDateFormat(DateFormats.DATE_23_S)).parse(strDate);
				} else {
					date = (new SimpleDateFormat(DateFormats.DATE_23)).parse(strDate);
				}
				break;
			case 24:
				date = (new SimpleDateFormat(DateFormats.DATE_24)).parse(strDate.replace('T', ' ').replace("Z", ""));
				break;
			case 25:
				date = (new SimpleDateFormat(DateFormats.DATE_25_T_X)).parse(strDate);
				break;
			case 28:
				date = (new SimpleDateFormat(DateFormats.DATE_28)).parse(strDate);
				break;
			case 29:
				date = (new SimpleDateFormat(DateFormats.DATE_29)).parse(strDate);
				break;
			case 30:
				date = (new SimpleDateFormat(DateFormats.DATE_30)).parse(strDate);
				break;
			case 34:
				date = (new SimpleDateFormat(DateFormats.DATE_34)).parse(strDate);
				break;
			default:
				throw new RuntimeException(String.format("Invalid DateFormat: %s!", strDate));
			}

		} catch (ParseException e) {
			throw new RuntimeException(String.format("Invalid DateFormat: %s! %s", strDate, e.getMessage()));
		}

		return date;
	}

	public static int toInt(Object obj) {
		try {
			if (obj == null)
				return 0;

			Class<?> type = obj.getClass();

			if (type == String.class)
				return Double.valueOf((String) obj).intValue();
			else if (type == Integer.class)
				return (Integer) obj;
			else if (type == Byte.class)
				return (int) (Byte) obj;
			else if (type == Long.class)
				return ((Long) obj).intValue();
			else if (type == BigDecimal.class)
				return ((BigDecimal) obj).intValue();
			else if (type == Double.class)
				return ((Double) obj).intValue();
			else if (type == Float.class)
				return ((Float) obj).intValue();
			else if (type == Boolean.class)
				return (Boolean) obj ? 1 : 0;
			else {
				return Double.valueOf(String.valueOf(obj)).intValue();
			}
		} catch (Exception e) {
			return 0;
		}
	}
}
