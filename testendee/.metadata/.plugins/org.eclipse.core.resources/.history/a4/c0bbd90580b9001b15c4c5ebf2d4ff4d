package testendee.client.global;

import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Converter {

	public static String toDateStr(Date date) {
		if (date == null)
			return "01-01-01";
		DateFormat df = new SimpleDateFormat(DateFormats.DATE_SIMPLE);
		return df.format(date);
	}

	public static String toDateStr(Date date, String format) {
		if (date == null)
			date = new Date(0);
		DateFormat df = new SimpleDateFormat(format);
		return df.format(date);
	}

	public static String toDateStr(Date date, char splitter) {
		if (date == null)
			return String.format("01%s01%s01", splitter, splitter);
		DateFormat df = new SimpleDateFormat(DateFormats.DATE_SIMPLE.replace('-', splitter));
		return df.format(date);
	}

	public static String toDateTimeStr(Date date) {
		if (date == null)
			return "01-01-01 00:00:00";
		DateFormat df = new SimpleDateFormat(DateFormats.DATE_TIME_SIMPLE);
		return df.format(date);
	}

	public static String toDateTimeStr(Date date, String dateTimeFormat) {
		if (date == null)
			return "01-01-01T00:00:00";
		DateFormat df = new SimpleDateFormat(dateTimeFormat);
		return df.format(date);
	}

	public static String toDateTimeStr(Date date, char dateSplitter) {
		if (date == null)
			return String.format("01%s01%s01 00:00:00", dateSplitter, dateSplitter);
		DateFormat df = new SimpleDateFormat(DateFormats.DATE_TIME_SIMPLE.replace('-', dateSplitter));
		return df.format(date);
	}

	public static String toDateTimeStr(Date date, char dateSplitter, char timeSplitter) {
		if (date == null)
			return String.format("01%s01%s01 00%s00%s00", dateSplitter, dateSplitter, timeSplitter, timeSplitter);
		DateFormat df = new SimpleDateFormat(
				DateFormats.DATE_TIME_SIMPLE.replace('-', dateSplitter).replace(':', timeSplitter));
		return df.format(date);
	}

	public static String toStr(Object obj) {

		if (obj == null)
			return "";

		String ret = null;
		Class<?> type = obj.getClass();
		if (type == Date.class) {
			Date d = (Date) obj;
			ret = toDateTimeStr(d);
		} else if (type == String.class) {
			ret = (String) obj;
		} else {
			ret = String.valueOf(obj);
		}

		return ret;
	}

	public static String toStdStr(String str) {
		if (str == null) {
			return null;
		}

		return str.toUpperCase().trim();
	}

	public static Date parseDate(String strDate) {

		Date date = null;

		if (strDate == null)
			return null;

		strDate = strDate.trim();

		if (strDate.length() == 0 || strDate.equals("null"))
			return null;

		try {
			switch (strDate.trim().length()) {
			case 0:
				date = null;
				break;
			case 6:
				date = (new SimpleDateFormat(DateFormats.DATE_6)).parse(strDate);
				break;
			case 8:
				date = (new SimpleDateFormat(DateFormats.TIME_SIMPLE)).parse(strDate);
				break;
			case 9:
				date = (new SimpleDateFormat(DateFormats.DATE_9_SHORT_YEAR)).parse(strDate);
				break;
			case 10:
				if (strDate.substring(4, 5).equals("."))
					date = (new SimpleDateFormat(DateFormats.DATE_DOT)).parse(strDate);
				else if (strDate.charAt(4) == '-' && strDate.charAt(7) == '-')
					date = (new SimpleDateFormat(DateFormats.DATE_SIMPLE)).parse(strDate);
				else if (strDate.substring(4, 5).equals("/"))
					date = (new SimpleDateFormat(DateFormats.DATE_SLUSH)).parse(strDate);
				else
					date = (new SimpleDateFormat(DateFormats.DATE_10)).parse(strDate);
				break;
			case 12:
				date = (new SimpleDateFormat(DateFormats.DATE_12)).parse(strDate);
				break;
			case 19:
				if (strDate.contains("T"))
					date = (new SimpleDateFormat(DateFormats.DATE_19_T)).parse(strDate);
				else if (strDate.substring(4, 5).equals("."))
					date = (new SimpleDateFormat(DateFormats.DATE_DOT_TIME)).parse(strDate);
				else
					date = (new SimpleDateFormat(DateFormats.DATE_TIME_SIMPLE)).parse(strDate);
				break;
			case 20:
				date = (new SimpleDateFormat(DateFormats.DATE_20_T_Z)).parse(strDate);
				break;
			case 21:
				if (strDate.substring(4, 5).equals("."))
					date = (new SimpleDateFormat(DateFormats.DATE_21_DOT)).parse(strDate);
				else
					date = (new SimpleDateFormat(DateFormats.DATE_21)).parse(strDate);
				break;
			case 22:
				date = (new SimpleDateFormat(DateFormats.DATE_22)).parse(strDate);
				break;
			case 23:
				if (strDate.substring(4, 5).equals("."))
					date = (new SimpleDateFormat(DateFormats.DATE_23_DOT)).parse(strDate);
				else if (strDate.contains("'T'")) {
					date = (new SimpleDateFormat(DateFormats.DATE_23_S)).parse(strDate);
				} else {
					date = (new SimpleDateFormat(DateFormats.DATE_23)).parse(strDate);
				}
				break;
			case 24:
				date = (new SimpleDateFormat(DateFormats.DATE_24)).parse(strDate.replace('T', ' ').replace("Z", ""));
				break;
			case 25:
				date = (new SimpleDateFormat(DateFormats.DATE_25_T_X)).parse(strDate);
				break;
			case 28:
				date = (new SimpleDateFormat(DateFormats.DATE_28)).parse(strDate);
				break;
			case 29:
				date = (new SimpleDateFormat(DateFormats.DATE_29)).parse(strDate);
				break;
			case 30:
				date = (new SimpleDateFormat(DateFormats.DATE_30)).parse(strDate);
				break;
			case 34:
				date = (new SimpleDateFormat(DateFormats.DATE_34)).parse(strDate);
				break;
			default:
				throw new RuntimeException(String.format("Invalid DateFormat: %s!", strDate));
			}

		} catch (ParseException e) {
			throw new RuntimeException(String.format("Invalid DateFormat: %s! %s", strDate, e.getMessage()));
		}

		return date;
	}

	public static int toInt(Object obj) {
		try {
			if (obj == null)
				return 0;

			Class<?> type = obj.getClass();

			if (type == String.class)
				return Double.valueOf((String) obj).intValue();
			else if (type == Integer.class)
				return (Integer) obj;
			else if (type == Byte.class)
				return (int) (Byte) obj;
			else if (type == Long.class)
				return ((Long) obj).intValue();
			else if (type == BigDecimal.class)
				return ((BigDecimal) obj).intValue();
			else if (type == Double.class)
				return ((Double) obj).intValue();
			else if (type == Float.class)
				return ((Float) obj).intValue();
			else if (type == Boolean.class)
				return (Boolean) obj ? 1 : 0;
			else {
				return Double.valueOf(String.valueOf(obj)).intValue();
			}
		} catch (Exception e) {
			return 0;
		}
	}

	public static long toLong(Object val) {
		try {
			if (val == null)
				return 0L;

			Class<?> type = val.getClass();

			if (type == String.class)
				return Double.valueOf((String) val).longValue();
			else if (type == Integer.class)
				return (long) (Integer) val;
			else if (type == Byte.class)
				return (long) (Byte) val;
			else if (type == Long.class)
				return (Long) val;
			else if (type == BigDecimal.class)
				return ((BigDecimal) val).longValue();
			else if (type == Double.class)
				return ((Double) val).longValue();
			else if (type == Float.class)
				return ((Float) val).longValue();
			else if (type == Boolean.class)
				return (Boolean) val ? 1L : 0L;
			else {
				// Do nothing
			}

			return Double.valueOf(String.valueOf(val)).longValue();

		} catch (Exception e) {
			return 0l;
		}
	}

	public static String firstChar2Upper(String str) {
		if (Utils.emptyOrNull(str))
			return str;

		if (str.length() > 1)
			return str.substring(0, 1).toUpperCase() + str.substring(1);
		else
			return str.toUpperCase();
	}

	public static String firstChar2Lower(String str) {
		if (Utils.emptyOrNull(str))
			return str;

		if (str.length() > 1)
			return str.substring(0, 1).toLowerCase() + str.substring(1);
		else
			return str.toLowerCase();
	}

	public static <T> T cloneObject(Object src, Class<T> dst) throws TestendeeException {
		T result = null;

		if (src == null)
			return null;

		if (dst == null) {
			throw new TestendeeException(UtilMessage.INVALID_PARAM);
		}

		Object getterResult = null;
		String field = "";
		try {
			result = dst.newInstance();

			for (Method methodSrc : src.getClass().getDeclaredMethods()) {
				if (methodSrc.getName().length() > 3 && methodSrc.getName().startsWith("get")) {

					field = methodSrc.getName().substring(3).toLowerCase();

					getterResult = methodSrc.invoke(src);
					String className = "";
					if (getterResult != null) {
						className = getterResult.getClass().getName();
					}

					if (className.length() > 2 && "PK".equals(className.substring(className.length() - 2))) {
						cloneObject(getterResult, result);
					} else {

						for (Method methodDst : dst.getMethods()) {
							if (methodDst.getName().length() > 3 && methodDst.getName().startsWith("set")
									&& methodDst.getName().substring(3).equalsIgnoreCase(field)) {

								Class<?> cls = methodSrc.getReturnType();
								if (!Utils.isNumber(cls) && !Utils.isString(cls) && !Utils.isChar(cls)
										&& !Utils.isDate(cls) && !Utils.isBool(cls)) {
									try {
										methodDst.invoke(result,
												cloneObject(getterResult, methodDst.getParameterTypes()[0]));
									} catch (Exception e) {
										methodDst.invoke(result, getterResult);
									}
								} else {
									methodDst.invoke(result, getterResult);
								}
								break;
							}
						}
					}
				}
			}
		} catch (Exception e) {
			FileLogger.error(Converter.class, "Clone", e);
			throw new TestendeeException(UtilMessage.COULD_NOT_CLONE);
		}

		return result;
	}

	public static void cloneObject(Object src, Object dst) throws TestendeeException {

		try {
			for (Method methodDst : dst.getClass().getMethods()) {
				if (methodDst.getName().length() > 3 && methodDst.getName().startsWith("set")) {
					String field = methodDst.getName().substring(3).toLowerCase();

					for (Method methodSrc : src.getClass().getMethods()) {
						if (methodSrc.getName().length() > 3 && methodSrc.getName().startsWith("get")
								&& methodSrc.getName().substring(3).equalsIgnoreCase(field)) {
							methodDst.invoke(dst, methodSrc.invoke(src));
							break;
						}
					}
				}
			}
		} catch (Exception e) {
			throw new TestendeeException(e);
		}
	}

	public static <T> List<T> cloneObjectList(List<?> src, Class<T> dst) throws TestendeeException {
		List<T> result = new ArrayList<>();

		if (null == src)
			return result;

		for (Object o : src) {
			result.add(cloneObject(o, dst));
		}

		return result;
	}
}
